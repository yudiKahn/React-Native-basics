{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"D:\\\\Projects\\\\React Native Todo's\\\\App.js\";\nimport React, { useState } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TaskInput from \"./components/TaskInput\";\nimport TaskItems from \"./components/TaskItems\";\nexport default function App() {\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      task = _useState2[0],\n      setTask = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      allTasks = _useState4[0],\n      setAllTasks = _useState4[1];\n\n  var _useState5 = useState(0),\n      _useState6 = _slicedToArray(_useState5, 2),\n      id = _useState6[0],\n      setId = _useState6[1];\n\n  var addNewTask = function addNewTask() {\n    if (task.length > 0) {\n      setAllTasks([].concat(_toConsumableArray(allTasks), [{\n        task: task,\n        id: id,\n        done: false\n      }]));\n      setId(id + 1);\n      setTask('');\n    } else {\n      Alert.alert(\"Error !\", \"Please Enter A Title\");\n    }\n  };\n\n  var deleteTask = function deleteTask(id) {\n    return setAllTasks(allTasks.filter(function (v) {\n      return v.id !== id;\n    }));\n  };\n\n  var changeTaskDone = function changeTaskDone(t) {\n    return setAllTasks(allTasks.map(function (v) {\n      return v.id === t.id ? {\n        task: t.task,\n        id: t.id,\n        done: !t.done\n      } : v;\n    }));\n  };\n\n  return React.createElement(ScrollView, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 11\n    }\n  }, React.createElement(View, {\n    style: styles.nav,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }\n  }, React.createElement(Text, {\n    style: {\n      top: 40,\n      color: '#fff',\n      textAlign: 'center',\n      fontSize: 30\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 10\n    }\n  }, \"MY TODO'S\")), React.createElement(TaskInput, {\n    addNewTask: addNewTask,\n    task: task,\n    setTask: setTask,\n    styles: styles,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }\n  }), React.createElement(TaskItems, {\n    allTasks: allTasks,\n    changeTaskDone: changeTaskDone,\n    deleteTask: deleteTask,\n    styles: styles,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }\n  }));\n}\nvar styles = StyleSheet.create({\n  nav: {\n    position: 'relative',\n    height: 80,\n    backgroundColor: 'rgb(33, 150, 243)'\n  },\n  container: {\n    flex: 1,\n    flexDirection: 'row',\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n    margin: 20,\n    position: 'relative'\n  },\n  btn: {\n    backgroundColor: 'rgb(33, 150, 243)',\n    padding: 8,\n    borderRadius: 20,\n    position: 'relative'\n  },\n  task: {\n    shadowColor: \"#000\",\n    padding: 20,\n    borderRadius: 20,\n    shadowOffset: {\n      width: 0,\n      height: 12\n    },\n    shadowOpacity: 0.58,\n    shadowRadius: 16.00,\n    elevation: 24\n  },\n  input: {\n    marginLeft: 10,\n    borderColor: 'lightblue',\n    borderWidth: 1,\n    borderRadius: 20,\n    width: 200,\n    height: 35,\n    paddingRight: 10\n  }\n});","map":{"version":3,"sources":["D:/Projects/React Native Todo's/App.js"],"names":["React","useState","TaskInput","TaskItems","App","task","setTask","allTasks","setAllTasks","id","setId","addNewTask","length","done","Alert","alert","deleteTask","filter","v","changeTaskDone","t","map","styles","nav","top","color","textAlign","fontSize","StyleSheet","create","position","height","backgroundColor","container","flex","flexDirection","alignItems","justifyContent","margin","btn","padding","borderRadius","shadowColor","shadowOffset","width","shadowOpacity","shadowRadius","elevation","input","marginLeft","borderColor","borderWidth","paddingRight"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\nimport {StyleSheet, ScrollView, Alert, View, Text}  from 'react-native';\nimport TaskInput from './components/TaskInput';\nimport TaskItems from './components/TaskItems';\n\n\nexport default function App() {\n  const [task, setTask] = useState('');\n  const [allTasks, setAllTasks] = useState([]);\n  const [id, setId] = useState(0);\n\n  const addNewTask = () => {\n    if(task.length>0){\n      setAllTasks([...allTasks, {task, id, done: false}]);\n      setId(id+1);\n      setTask('');\n    } else {\n      Alert.alert(\"Error !\",\"Please Enter A Title\");\n    }\n  }\n\n  const deleteTask = id => setAllTasks(allTasks.filter((v)=>v.id!==id));\n\n  const changeTaskDone = t => setAllTasks(allTasks.map(v => v.id === t.id ? {task:t.task, id:t.id, done: !t.done} : v));\n\n  return (<ScrollView>\n      <View style={styles.nav}>\n         <Text style={{top:40, color:'#fff',textAlign:'center', fontSize:30}}>MY TODO'S</Text>\n      </View>\n      <TaskInput addNewTask={addNewTask} task={task} setTask={setTask} styles={styles}/>\n      <TaskItems allTasks={allTasks} changeTaskDone={changeTaskDone} deleteTask={deleteTask} styles={styles}/>\n  </ScrollView>);\n}\n\nconst styles = StyleSheet.create({\n  nav: {\n    position:'relative',\n    height:80, backgroundColor:'rgb(33, 150, 243)',\n    \n  },  \n  container: {\n    flex: 1,\n    flexDirection:'row',\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n    margin: 20,\n    position:'relative'\n  },\n  btn: {\n    backgroundColor:'rgb(33, 150, 243)',\n    padding:8,\n    borderRadius:20,\n    position:'relative'\n  },\n  task:{\n    shadowColor: \"#000\",padding:20,borderRadius:20,\n    shadowOffset: {width: 0, height: 12,}, shadowOpacity: 0.58,shadowRadius: 16.00,elevation: 24\n  },\n  input: {\n    marginLeft:10,\n    borderColor: 'lightblue',\n    borderWidth: 1,\n    borderRadius:20,\n    width:200,\n    height:35,\n    paddingRight:10\n  }\n});\n"]},"metadata":{},"sourceType":"module"}